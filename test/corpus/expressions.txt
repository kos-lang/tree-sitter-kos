=================
Unary expressions
=================

1;
+2;
typeof 2;
-+3;
typeof delete !~+-4;

# Split into separate lines
typeof
delete
!
~
+
-
4

---

(source_file
    (expression
        (number))
    (expression
        (unary_expression
            (unary_operator)
            (number)))
    (expression
        (unary_expression
            (unary_operator)
            (number)))
    (expression
        (unary_expression
            (unary_operator)
            (unary_expression
                (unary_operator)
                (number))))
    (expression
        (unary_expression
            (unary_operator)
            (unary_expression
                (unary_operator)
                (unary_expression
                    (unary_operator)
                    (unary_expression
                        (unary_operator)
                        (unary_expression
                            (unary_operator)
                            (unary_expression
                                (unary_operator)
                                (number))))))))
    (comment)
    (expression
        (unary_expression
            (unary_operator)
            (unary_expression
                (unary_operator)
                (unary_expression
                    (unary_operator)
                    (unary_expression
                        (unary_operator)
                        (unary_expression
                            (unary_operator)
                            (unary_expression
                                (unary_operator)
                                (number)))))))))

==============
Multiplication
==============

1 * 2
3 / 4 * 5 % 6;
+11*12
13*+14

/* Split into separate lines
 * TODO If operator comes on a new line, this is legal syntax
 * however we do not parse it correctly
 */
3 /
4 *
5 %
+
6

---

(source_file
    (expression
        (multiplicative_expression
            (number)
            (multiplicative_operator)
            (number)))
    (expression
        (multiplicative_expression
            (number)
            (multiplicative_operator)
            (number)
            (multiplicative_operator)
            (number)
            (multiplicative_operator)
            (number)))
    (expression
        (multiplicative_expression
            (unary_expression
                (unary_operator)
                (number))
            (multiplicative_operator)
            (number)))
    (expression
        (multiplicative_expression
            (number)
            (multiplicative_operator)
            (unary_expression
                (unary_operator)
                (number))))
    (comment)
    (expression
        (multiplicative_expression
            (number)
            (multiplicative_operator)
            (number)
            (multiplicative_operator)
            (number)
            (multiplicative_operator)
            (unary_expression
                (unary_operator)
                (number)))))

========
Addition
========

x(1 + 2)
x(1 * 2 + 3)
x(4 + 5 * 6)
x(3 + 4 - 5 + 6)

---

(source_file
    (expression
        (invocation
            (identifier)
            (argument_list
                (additive_expression
                    (number)
                    (additive_operator)
                    (number)))))
    (expression
        (invocation
            (identifier)
            (argument_list
                (additive_expression
                    (multiplicative_expression
                        (number)
                        (multiplicative_operator)
                        (number))
                    (additive_operator)
                    (number)))))
    (expression
        (invocation
            (identifier)
            (argument_list
                (additive_expression
                    (number)
                    (additive_operator)
                    (multiplicative_expression
                        (number)
                        (multiplicative_operator)
                        (number))))))
    (expression
        (invocation
            (identifier)
            (argument_list
                (additive_expression
                    (number)
                    (additive_operator)
                    (number)
                    (additive_operator)
                    (number)
                    (additive_operator)
                    (number))))))

======
Shifts
======

const a = 1 << 2
const b = 1 >> 3
const c = -1 >>> 4

---

(source_file
    (expression (variable_definition
        (const_list (identifier))
        (bitwise_shift_expression
            (number)
            (bitwise_shift_operator)
            (number))))
    (expression (variable_definition
        (const_list (identifier))
        (bitwise_shift_expression
            (number)
            (bitwise_shift_operator)
            (number))))
    (expression (variable_definition
        (const_list (identifier))
        (bitwise_shift_expression
            (unary_expression
                (unary_operator)
                (number))
            (bitwise_shift_operator)
            (number)))))

==========
Comparison
==========

a = 1 == 2
b(3 + 4 * 5 < 6 >> 7)

---

(source_file
    (expression (assignment
        (identifier)
        (comparison_expression
            (number)
            (comparison_operator)
            (number))))
    (expression (invocation
        (identifier)
        (argument_list
            (comparison_expression
                (additive_expression
                    (number)
                    (additive_operator)
                    (multiplicative_expression
                        (number)
                        (multiplicative_operator)
                        (number)))
                (comparison_operator)
                (bitwise_shift_expression
                    (number)
                    (bitwise_shift_operator)
                    (number)))))))

===========
Conditional
===========

const a = 1 ? 2 : 3
const b = 4 == 5 && 10 < 11 ? 6 ^ 7 : 8 & 9

---

(source_file
    (expression
        (variable_definition (const_list
            (identifier))
            (conditional_expression
                (number)
                (number)
                (number))))
    (expression
        (variable_definition (const_list
            (identifier))
            (conditional_expression
                (logical_and_expression
                    (comparison_expression
                        (number)
                        (comparison_operator)
                        (number))
                    (logical_and_operator)
                    (comparison_expression
                        (number)
                        (comparison_operator)
                        (number)))
                (bitwise_xor_expression
                    (number)
                    (bitwise_xor_operator)
                    (number))
                (bitwise_and_expression
                    (number)
                    (bitwise_and_operator)
                    (number))))))

=====
Yield
=====

fun xx
{
    yield 1 == 2 * 3 ? 5 : 6
}

---

(source_file
    (function_decl
        (identifier)
        (compound_statement
            (expression
                (yield_expression
                    (conditional_expression
                        (comparison_expression
                            (number)
                            (comparison_operator)
                            (multiplicative_expression
                                (number)
                                (multiplicative_operator)
                                (number)))
                        (number)
                        (number)))))))

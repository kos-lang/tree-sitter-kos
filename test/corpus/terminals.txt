========
Comments
========

/* Comment 1 */

/* Comment
 * 2
 */

// Comment 3

# Comment 4

---

(source_file
    (comment)
    (comment)
    (comment)
    (comment))

========
numbers
========

# Decimal
0;
123;

# Float
12.3;
12.;
0.3;
1.p10;
1.e10;
1.p+10;
1.p+2;
1.p-2;
1.e+2;
1.e-2;

# Hex
0x1;
0xabcdef;
0XABCDEF;

# Binary
0b0;
0b1;

---

(source_file
    (comment)
    (expression (number))
    (expression (number))

    (comment)
    (expression (number))
    (expression (number))
    (expression (number))
    (expression (number))
    (expression (number))
    (expression (number))
    (expression (number))
    (expression (number))
    (expression (number))
    (expression (number))

    (comment)
    (expression (number))
    (expression (number))
    (expression (number))

    (comment)
    (expression (number))
    (expression (number)))

================
Literal keywords
================

fun some
{
    this
    super
    __line__
    true
    false
    void
}

---

(source_file
    (function_decl
        name: (identifier)
        (compound_statement
            (expression (this))
            (expression (super))
            (expression (line))
            (expression (true))
            (expression (false))
            (expression (void)))))

======
Arrays
======

[]
[1,2,3]
[[1],2,[[3]]]

---

(source_file
    (expression (array))
    (expression (array
        (array_element (number))
        (array_element (number))
        (array_element (number))))
    (expression (array
        (array_element
            (array
                (array_element (number))))
        (array_element (number))
        (array_element (array
            (array_element (array
                (array_element (number)))))))))

=======
Objects
=======

{}
{a:1,
"b" : 4
}

---

(source_file
    (expression (object))
    (expression (object
        (property (property_identifier) (number))
        (property (string_literal) (number)))))

=======
Strings
=======

""
"abc"

# UTF-8 characters
"ąę"

# Escapes
"\r\n\v\t\f\"\0\xff\x{123ABC}"
"back\\slash"

---

(source_file
    (expression (string_literal))
    (expression (string_literal))
    (comment)
    (expression (string_literal))
    (comment)
    (expression (string_literal))
    (expression (string_literal)))

=================
Formatted strings
=================

"hello \(123) world"

"very \(1+2) long \(3+4) string_literal"

---

(source_file
    (expression
        (formatted_string
            (string_literal_begin)
            (number)
            (string_literal_end)))
    (expression
        (formatted_string
            (string_literal_begin)
            (additive_expression
                (number)
                (additive_operator)
                (number))
            (string_literal_continuation)
            (additive_expression
                (number)
                (additive_operator)
                (number))
            (string_literal_end))))
